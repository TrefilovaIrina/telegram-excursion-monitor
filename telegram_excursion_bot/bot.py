import os
import logging
import asyncio
import re
from typing import Set
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
YOUR_CHAT_ID = int(os.getenv("YOUR_CHAT_ID"))
TARGET_CHAT_IDS = [int(chat_id.strip()) for chat_id in os.getenv("TARGET_CHATS").split(",")]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
def contains_keyword(text: str, keywords: list) -> bool:
    text = text.lower()
    return any(re.search(rf'\b{re.escape(word)}\b', text) for word in keywords)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = [
    "—ç–∫—Å–∫—É—Ä—Å–∏—è", "—ç–∫—Å–∫—É—Ä—Å–∏–∏", "–≥–∏–¥", "–≥–∏–¥—ã", "—Ç—É—Ä", "—Ç—É—Ä—ã",
    "–ø–æ–µ–∑–¥–∫–∞", "—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥", "–≥–∏–¥ –ø–æ", "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Ä",
    "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å", "–≥—Ä—É–ø–ø–æ–≤–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è", "—ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
]

available_chat_ids: Set[int] = set()

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def format_alert(event):
    try:
        sender = await event.get_sender()
        if hasattr(sender, "first_name"):
            sender_name = f"{sender.first_name} {getattr(sender, 'last_name', '')}".strip()
            sender_id = sender.id
        else:
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            sender_id = "?"

        chat = await event.get_chat()
        chat_title = getattr(chat, "title", None) or getattr(chat, "username", None) or str(event.chat_id)
        link = f"https://t.me/{chat.username}/{event.id}" if getattr(chat, "username", None) else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        return (
            f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!\n\n"
            f"–ß–∞—Ç: {chat_title}\n"
            f"–û—Ç: {sender_name} (ID: {sender_id})\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{event.text}\n\n"
            f"{link}"
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", exc_info=True)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage)
async def handler(event):
    try:
        if event.chat_id not in available_chat_ids:
            return

        if contains_keyword(event.text, KEYWORDS):
            alert = await format_alert(event)
            await client.send_message(YOUR_CHAT_ID, alert)
            logger.info("üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π", exc_info=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    await client.start()
    dialogs = await client.get_dialogs()

    logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã...")
    for dialog in dialogs:
        if dialog.id in TARGET_CHAT_IDS:
            available_chat_ids.add(dialog.id)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {dialog.name} ({dialog.id})")

    if not available_chat_ids:
        logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å TARGET_CHATS")

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(run_bot())
