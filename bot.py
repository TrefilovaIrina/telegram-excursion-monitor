import os
import logging
from dotenv import load_dotenv
from telethon import TelegramClient, events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
TARGET_CHATS = os.getenv('TARGET_CHATS').split(',')  # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
YOUR_CHAT_ID = int(os.getenv('YOUR_CHAT_ID'))

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient('excursion_monitor', API_ID, API_HASH)

@client.on(events.NewMessage(chats=TARGET_CHATS))
async def monitor_messages(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "—ç–∫—Å–∫—É—Ä—Å–∏—è"
        if "—ç–∫—Å–∫—É—Ä—Å–∏—è" in event.text.lower():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await event.get_chat()
            chat_title = chat.title if hasattr(chat, 'title') else chat.username
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ
            me = await client.get_me()
            monitor_name = f"{me.first_name} {me.last_name if me.last_name else ''}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            sender = event.sender
            sender_name = f"{sender.first_name} {sender.last_name if sender.last_name else ''}"
            
            notification = (
                f"üîî –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ '—ç–∫—Å–∫—É—Ä—Å–∏—è'!\n\n"
                f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_name}\n"
                f"–ß–∞—Ç: {chat_title}\n"
                f"–û—Ç: {sender_name}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {event.text}\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: https://t.me/{chat.username}/{event.id}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await client.send_message(YOUR_CHAT_ID, notification)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {sender_name} –≤ —á–∞—Ç–µ {chat_title}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤: {', '.join(TARGET_CHATS)}")
    await client.start()
    me = await client.get_me()
    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç: {me.first_name} {me.last_name if me.last_name else ''}")
    await client.run_until_disconnected()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    client.loop.run_until_complete(main()) 