import os
import logging
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –î–ª—è Jupyter: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º sys.stdout.reconfigure (–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
# –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∏ –ø–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session_string = os.getenv("SESSION_STRING")
your_chat_id = int(os.getenv("YOUR_CHAT_ID"))
target_chats = [int(x) for x in os.getenv("TARGET_CHATS", "").split(",")]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
KEYWORDS = [
    "—ç–∫—Å–∫—É—Ä—Å–∏—è", "—ç–∫—Å–∫—É—Ä—Å–∏–∏", "–≥–∏–¥", "–≥–∏–¥—ã", "—Ç—É—Ä", "—Ç—É—Ä—ã",
    "–ø–æ–µ–∑–¥–∫–∞", "—ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥", "–≥–∏–¥ –ø–æ", "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—É—Ä",
    "–∫—É–¥–∞ –ø–æ–µ—Ö–∞—Ç—å", "–≥—Ä—É–ø–ø–æ–≤–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è", "—ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"
]

# –ö–ª–∏–µ–Ω—Ç
client = TelegramClient(StringSession(session_string), api_id, api_hash)
available_chat_ids = set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage)
async def handler(event):
    try:
        if event.chat_id not in available_chat_ids:
            return

        if any(word in event.text.lower() for word in KEYWORDS):
            message = await format_alert(event)
            await client.send_message(your_chat_id, message)
            logger.info(f"üîî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {your_chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def format_alert(event):
    try:
        sender = await event.get_sender()
        sender_name = (
            f"{getattr(sender, 'first_name', '')} {getattr(sender, 'last_name', '')}".strip()
            if hasattr(sender, 'first_name') else getattr(sender, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
        )
        sender_id = getattr(sender, 'id', '–Ω–µ–∏–∑–≤.')
    except:
        sender_name = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
        sender_id = "N/A"

    try:
        chat = await event.get_chat()
        chat_title = getattr(chat, 'title', None) or getattr(chat, 'username', None) or str(event.chat_id)
        username = getattr(chat, 'username', None)
        link = f"https://t.me/{username}/{event.id}" if username else "üîí –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    except:
        chat_title = str(event.chat_id)
        link = "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"

    return (
        f"üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!\n\n"
        f"–ß–∞—Ç: {chat_title}\n"
        f"–û—Ç: {sender_name} (ID: {sender_id})\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{event.text}\n\n"
        f"{link}"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤
async def init_chats():
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        chat_id = dialog.id
        if chat_id in target_chats:
            available_chat_ids.add(chat_id)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {dialog.name} (ID: {chat_id})")
    if not available_chat_ids:
        logger.warning("‚ùó –ù–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ TARGET_CHATS")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    await client.start()
    await init_chats()
    me = await client.get_me()
    logger.info(f"üü¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–∞–∫: {me.first_name} ({me.id})")
    print("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:", available_chat_ids)
    await client.run_until_disconnected()

# –ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å –≤ Jupyter
import nest_asyncio
import asyncio
nest_asyncio.apply()
await run_bot()
